spring framework
spring boot

=> 내장 톰캣
=> jar or war
    어플리케이션 개발하고 테스트 후 실제 운영 서버에 배포하기 위해서는 패키지 필요
    => 웹 어플리케이션인 경우는 war 파일로 패키징 함
    => jar : 일반 응용 프로그램
=> 라이브러리 자동 관리(pom.xml)
=> spring framwork 와 다르게 설정 자동화

화면단 결정
=> jsp(default x) 
=>thymeleaf(html확장자 사용, 사용하기 편리함, jsp와 유사)
=>freemaker, groovy, mushache



project 구조

1) 자바 파일
    src/main/java/기본패키지/
2) html, css, js
    resource/static/
3) thymeleaf
    resource/templates
4) application.properties : 프로젝트 환경설정
    db설정, 서버 포트 변경, 로그설정...

스푸링 부트에서 데이터베이스 연동
1) 스프링 jdbc
2) ORM 라이브러리
    - Mybatis
    - hibernate


스프링 중요 개념
1. DI(Dependency Injection) : 위존성 주입
    -setter, 생성자를 이용한 객체 생성

   ==> 스프링 컨테이너가 필요한 객체를 필요한 시점에 주입해줄게(IoC) 
   ==> Inversion of Control(제어의 역전)

모든 요청은 컨트롤러에 있어야함

직접적으로 파일 링크 불가
<a href="index.html"> x

무조건 컨트롤러로 경로 지정

어노테이션
@Controller -> 컨트롤러 class 설정 / 스프링 컨테이너가 해당 클래스의 객체를 생성한 후 관리 해줌
@RequestMapping(value="", method=) -> path 설정및 post or get 방식 결정(구버전)
@GetMapping -> get방식의 path 설정
@PostMapping -> post 방식의 path 설정
@RequestParam -> request 에서 넘어오는 파라메터의 이름 지정할 때 사용
@ModelAttribute : Dto 객체 이름 지정


데이터베이스 연동
    1) JDBC 사용
------------------------------

스프링 프레임워크
    1) JDBC 사용(사용 잘 안함)
    2) 스프링 DAO(사용 잘 안함)
    3) 마이바티즈 - 자주사용(Sub)
    4) 하이버 네이트 ORM - 자주사용 (Main)





1. JPQL(Java Persistence Query Languege)
        -테이블이 아닌 객체를 대상으로 검색하는 객체 지향 쿼리
        -SQL 을 추상화해서 특정 데이터베이스 SQL에 의존하지 않음

    ex)
        SELECT m(Entity) FROM Member m WHERE m.username = 'JOHN'

        findBy : 특정한 칼럼의 값 조회
            Collection<T> findBy + 속성이름(타입);
        and ,or 조건 처리
         Collection<T> findBy TitleOrContent
2. 네이티브 SQL
    -JPA 에서 JSQL 대신 직접이용




JPQL 사용 메소드
Distinct

findDistinctByLastnameAndFirstname

select distinct …​ where x.lastname = ?1 and x.firstname = ?2

And

findByLastnameAndFirstname

… where x.lastname = ?1 and x.firstname = ?2

Or

findByLastnameOrFirstname

… where x.lastname = ?1 or x.firstname = ?2

Is, Equals

findByFirstname,findByFirstnameIs,findByFirstnameEquals

… where x.firstname = ?1

Between

findByStartDateBetween

… where x.startDate between ?1 and ?2

LessThan

findByAgeLessThan

… where x.age < ?1

LessThanEqual

findByAgeLessThanEqual

… where x.age <= ?1

GreaterThan

findByAgeGreaterThan

… where x.age > ?1

GreaterThanEqual

findByAgeGreaterThanEqual

… where x.age >= ?1

After

findByStartDateAfter

… where x.startDate > ?1

Before

findByStartDateBefore

… where x.startDate < ?1

IsNull, Null

findByAge(Is)Null

… where x.age is null

IsNotNull, NotNull

findByAge(Is)NotNull

… where x.age not null

Like

findByFirstnameLike

… where x.firstname like ?1

NotLike

findByFirstnameNotLike

… where x.firstname not like ?1

StartingWith

findByFirstnameStartingWith

… where x.firstname like ?1 (parameter bound with appended %)

EndingWith

findByFirstnameEndingWith

… where x.firstname like ?1 (parameter bound with prepended %)

Containing

findByFirstnameContaining

… where x.firstname like ?1 (parameter bound wrapped in %)

OrderBy

findByAgeOrderByLastnameDesc

… where x.age = ?1 order by x.lastname desc

Not

findByLastnameNot

… where x.lastname <> ?1

In

findByAgeIn(Collection<Age> ages)

… where x.age in ?1

NotIn

findByAgeNotIn(Collection<Age> ages)

… where x.age not in ?1

True

findByActiveTrue()

… where x.active = true

False

findByActiveFalse()

… where x.active = false

IgnoreCase

findByFirstnameIgnoreCase

… where UPPER(x.firstname) = UPPER(?1)



QueryDSL

    쿼리를 문자가 아닌 코드로 작성해서 쉽고, 간결하며 모양도 쿼리와 비슷하게 개발
    다양한 상황에 맞게 쿼리를 생성하는 경우 사용- >동적 쿼리

    Querydsl - QuerydslPredicateExecutor    
             - 사용자 정의 인터페이스 설계 후 QueryDslRepositorySupport